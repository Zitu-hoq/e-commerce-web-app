/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VouchersImport } from './routes/vouchers'
import { Route as OrdersImport } from './routes/orders'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AddProductImport } from './routes/addProduct'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/products')()
const CustomersLazyImport = createFileRoute('/customers')()
const BannersLazyImport = createFileRoute('/banners')()
const AnalyticsLazyImport = createFileRoute('/analytics')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/products.lazy').then((d) => d.Route))

const CustomersLazyRoute = CustomersLazyImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/customers.lazy').then((d) => d.Route))

const BannersLazyRoute = BannersLazyImport.update({
  id: '/banners',
  path: '/banners',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/banners.lazy').then((d) => d.Route))

const AnalyticsLazyRoute = AnalyticsLazyImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/analytics.lazy').then((d) => d.Route))

const VouchersRoute = VouchersImport.update({
  id: '/vouchers',
  path: '/vouchers',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AddProductRoute = AddProductImport.update({
  id: '/addProduct',
  path: '/addProduct',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/addProduct': {
      id: '/addProduct'
      path: '/addProduct'
      fullPath: '/addProduct'
      preLoaderRoute: typeof AddProductImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/vouchers': {
      id: '/vouchers'
      path: '/vouchers'
      fullPath: '/vouchers'
      preLoaderRoute: typeof VouchersImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsLazyImport
      parentRoute: typeof rootRoute
    }
    '/banners': {
      id: '/banners'
      path: '/banners'
      fullPath: '/banners'
      preLoaderRoute: typeof BannersLazyImport
      parentRoute: typeof rootRoute
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersLazyImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/addProduct': typeof AddProductRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/vouchers': typeof VouchersRoute
  '/analytics': typeof AnalyticsLazyRoute
  '/banners': typeof BannersLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/products': typeof ProductsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/addProduct': typeof AddProductRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/vouchers': typeof VouchersRoute
  '/analytics': typeof AnalyticsLazyRoute
  '/banners': typeof BannersLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/products': typeof ProductsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/addProduct': typeof AddProductRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/vouchers': typeof VouchersRoute
  '/analytics': typeof AnalyticsLazyRoute
  '/banners': typeof BannersLazyRoute
  '/customers': typeof CustomersLazyRoute
  '/products': typeof ProductsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/addProduct'
    | '/dashboard'
    | '/orders'
    | '/vouchers'
    | '/analytics'
    | '/banners'
    | '/customers'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/addProduct'
    | '/dashboard'
    | '/orders'
    | '/vouchers'
    | '/analytics'
    | '/banners'
    | '/customers'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/addProduct'
    | '/dashboard'
    | '/orders'
    | '/vouchers'
    | '/analytics'
    | '/banners'
    | '/customers'
    | '/products'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AddProductRoute: typeof AddProductRoute
  DashboardRoute: typeof DashboardRoute
  OrdersRoute: typeof OrdersRoute
  VouchersRoute: typeof VouchersRoute
  AnalyticsLazyRoute: typeof AnalyticsLazyRoute
  BannersLazyRoute: typeof BannersLazyRoute
  CustomersLazyRoute: typeof CustomersLazyRoute
  ProductsLazyRoute: typeof ProductsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AddProductRoute: AddProductRoute,
  DashboardRoute: DashboardRoute,
  OrdersRoute: OrdersRoute,
  VouchersRoute: VouchersRoute,
  AnalyticsLazyRoute: AnalyticsLazyRoute,
  BannersLazyRoute: BannersLazyRoute,
  CustomersLazyRoute: CustomersLazyRoute,
  ProductsLazyRoute: ProductsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/addProduct",
        "/dashboard",
        "/orders",
        "/vouchers",
        "/analytics",
        "/banners",
        "/customers",
        "/products"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/addProduct": {
      "filePath": "addProduct.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/vouchers": {
      "filePath": "vouchers.tsx"
    },
    "/analytics": {
      "filePath": "analytics.lazy.tsx"
    },
    "/banners": {
      "filePath": "banners.lazy.tsx"
    },
    "/customers": {
      "filePath": "customers.lazy.tsx"
    },
    "/products": {
      "filePath": "products.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
